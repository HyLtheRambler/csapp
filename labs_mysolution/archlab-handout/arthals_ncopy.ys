#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
# Arthals 2110306206@stu.pku.edu.cn
# Describe how and why you modified the baseline code.
# 1. 使用 8 路循环展开，一次性将 8 个数读入到寄存器中，使用不同的寄存器保证流水线满速运行，由于使用了不同的寄存器，所以不存在任何的数据冒险，也就不需要暂停，从而可以优化 CPE。
# 2. 8 路循环展开的第二个优点是余数处理的时候可以平衡地使用二叉树搜索，从而只需要 log2(8) = 3 次平均判断次数。
# 3. 循环体中，用了技巧在 andq 和 jle 之间插入了一条 rmmovq 指令，使得当设置条件码的指令到达 Memory 访存阶段时，jle 刚刚进入 Decode 解码阶段，从而可以立即使用正确的 M_Cnd，避免控制冒险，即在 Decode 解码阶段就可以知道是否需要跳转，避免了预测失败时的 2 个气泡周期的惩罚。
# 4. 余数处理部分交替使用了 3 中提到的技术与“戳气泡”技术来优化，避免加载/使用冒险，即在 mrmovq 和 andq 设置条件码之间插入一条指令（je）使得当 mrmovq 处于访存 Memory 阶段时，具体余数处理部分的 andq 进入译码 Decode 阶段，此时即可以使用转发技术来避免加载/使用冒险，从而避免暂停/气泡，优化 CPE。
# 5. 使用了一些其他的细节技术，如基于 f_pc 的转发优先级的寄存器覆写、对于余数为 0 的情况特殊剪枝等，进一步优化了 CPE。
# ——————————————
# 本地测评参数：
# ncopy length = 875 bytes
# 68/68 pass correctness test
# Average CPE     7.49
# Score   60.0/60.0
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
    # 8路循环展开，优点是余数处理的时候可以平衡地使用二叉树搜索，从而只需要3次平均判断次数
    iaddq $-8, %rdx
    jl handle_remainder
    # 进行8路循环展开，一次性将8个数读入到寄存器中，使用不同的寄存器保证流水线满速运行
    # 由于使用了不同的寄存器，所以不存在任何的数据冒险，也就不需要暂停，从而可以优化 CPE
loop_unrolling_8_way:
    mrmovq (%rdi), %r8
    mrmovq 8(%rdi), %r9
    mrmovq 16(%rdi), %r10
    mrmovq 24(%rdi), %r11
    mrmovq 32(%rdi), %r12
    mrmovq 40(%rdi), %r13
    mrmovq 48(%rdi), %r14
    mrmovq 56(%rdi), %rcx

    # 判断这8个读入的数据是否大于0，大于0则将其写入到dst中，同时计数器加1
judge_and_write_num_0:
    # 判断第一个数是否大于0
    andq %r8, %r8
    # 通过将 rmmovq 指令插入在读取并设置条件码的步骤与条件跳转 jle 之间
    # 使得当设置条件码的指令到达 Memory 访存阶段时，jle 刚刚进入 Decode 解码阶段
    # 从而可以立即使用正确的 M_Cnd，避免控制冒险，即在 Decode 解码阶段就可以知道是否需要跳转
    # 避免了预测失败时的2个气泡周期的惩罚
    rmmovq %r8, (%rsi)
    jle judge_and_write_num_1
    iaddq $1, %rax
judge_and_write_num_1:
    andq %r9, %r9
    rmmovq %r9, 8(%rsi)
    jle judge_and_write_num_2
    iaddq $1, %rax
judge_and_write_num_2:
    andq %r10, %r10
    rmmovq %r10, 16(%rsi)
    jle judge_and_write_num_3
    iaddq $1, %rax
judge_and_write_num_3:
    andq %r11, %r11
    rmmovq %r11, 24(%rsi)
    jle judge_and_write_num_4
    iaddq $1, %rax
judge_and_write_num_4:
    andq %r12, %r12
    rmmovq %r12, 32(%rsi)
    jle judge_and_write_num_5
    iaddq $1, %rax
judge_and_write_num_5:
    andq %r13, %r13
    rmmovq %r13, 40(%rsi)
    jle judge_and_write_num_6
    iaddq $1, %rax
judge_and_write_num_6:
    andq %r14, %r14
    rmmovq %r14, 48(%rsi)
    jle judge_and_write_num_7
    iaddq $1, %rax
judge_and_write_num_7:
    andq %rcx, %rcx
    rmmovq %rcx, 56(%rsi)
    jle update_expr
    iaddq $1, %rax
update_expr:
    # 更新循环参数
    # rdi, rsi 都可以改，因为本次循环中的数据已经被写入到了 dst 中，且完成了正数判断
    # 所以不会再次使用，只需待循环结束时再去处理余数
    iaddq $64, %rdi
    iaddq $64, %rsi
    iaddq $-8, %rdx
    # 循环结束条件判断
    # 注意此时无法使用之前类似的控制冒险优化技术，因为必须知道 rdx 的新值才能确定是否要继续拷贝
    # 而插入 nop 指令无益于降低 CPE，因为预测失败的情况只有最后才会出现，并导致 2 个气泡周期的惩罚
    # 但是如果使用 nop 指令，每次循环都会多出 1 个时钟周期
    jge loop_unrolling_8_way

handle_remainder:
    # 余数处理，采用平衡二叉树搜索的方式，使得平均判断次数为 3 次
    # -8 ~ -1 -> -4 ~ 3
    iaddq $4, %rdx
    # -4 ~ -1
    jl handle_remainder_0_to_3

handle_remainder_4_to_7:
    # 0~3 -> -2 ~ 1
    iaddq $-2, %rdx
    # -2 ~ -1
    jl handle_remainder_4_to_5

handle_remainder_6_to_7:
    # 0 ~ 1
    # 开始进入到具体余数的处理，此时已经可以开始使用之前的技术来避免暂停，优化 CPE
    # 正常的过程是：
    # 1.判断设置状态码
    # 2.条件跳转（1个气泡的暂停）
    # 3.加载数据到寄存器
    # ----
    # 优化后的过程是
    # 1.判断设置状态码
    # 2.加载数据到寄存器
    # 3.条件跳转
    # 这可以使得 iaddq 处于访存 Memory 阶段时，je 已经获得了正确的 M_cnd，从而避免预测失败
    # 同时，可以交替使用“戳气泡”技术来优化数据冒险，即在 mrmovq 和 andq 设置条件码之间插入一条指令（je）
    # 使得当 mrmovq 处于访存 Memory 阶段时，具体余数处理部分的 andq 进入译码 Decode 阶段
    # 此时即可以使用转发技术来避免加载/使用冒险，从而避免暂停/气泡，优化 CPE
    mrmovq 40(%rdi), %rbx
    je handle_remainder_6
    # 由于存在转发优先级，所以最新的指令优先级最高
    # 所以可以直接覆写 %rbx，无需切换寄存器/等待冒泡
    mrmovq 48(%rdi), %rbx
    jmp handle_remainder_7

handle_remainder_4_to_5:
    # -2~-1 -> -1~0
    iaddq $1, %rdx
    mrmovq 32(%rdi), %rbx
    je handle_remainder_5
    mrmovq 24(%rdi), %rbx
    jmp handle_remainder_4

handle_remainder_0_to_3:
    # -4~-1 -> -2 ~ 1
    iaddq $2, %rdx
    jl handle_remainder_0_to_1

handle_remainder_2_to_3:
    # 0~1
    mrmovq 8(%rdi), %rbx
    je handle_remainder_2
    mrmovq 16(%rdi), %rbx
    jmp handle_remainder_3

handle_remainder_0_to_1:
    # -2 ~ -1
    iaddq $1, %rdx
    mrmovq (%rdi), %rbx
    je handle_remainder_1
    # 对于余数为 0 的情况，直接结束，不需要再进行任何判断/跳转
    # 跳转到 Done 再 ret 会增加 CPE
    ret

handle_remainder_7:
    # 进入前已经正确加载数据到 %rbx 中，可以直接开始判断是否大于0
    andq %rbx, %rbx
    rmmovq %rbx, 48(%rsi)
    mrmovq 40(%rdi), %rbx
    # 这里同样使用了戳气泡的技术
    jle handle_remainder_6
    iaddq $1, %rax
handle_remainder_6:
    andq %rbx, %rbx
    rmmovq %rbx, 40(%rsi)
    mrmovq 32(%rdi), %rbx
    jle handle_remainder_5
    iaddq $1, %rax
handle_remainder_5:
    andq %rbx, %rbx
    rmmovq %rbx, 32(%rsi)
    mrmovq 24(%rdi), %rbx
    jle handle_remainder_4
    iaddq $1, %rax
handle_remainder_4:
    andq %rbx, %rbx
    rmmovq %rbx, 24(%rsi)
    mrmovq 16(%rdi), %rbx
    jle handle_remainder_3
    iaddq $1, %rax
handle_remainder_3:
    andq %rbx, %rbx
    rmmovq %rbx, 16(%rsi)
    mrmovq 8(%rdi), %rbx
    jle handle_remainder_2
    iaddq $1, %rax
handle_remainder_2:
    andq %rbx, %rbx
    rmmovq %rbx, 8(%rsi)
    mrmovq (%rdi), %rbx
    jle handle_remainder_1
    iaddq $1, %rax
handle_remainder_1:
    andq %rbx, %rbx
    rmmovq %rbx, (%rsi)
    jle Done
    iaddq $1, %rax
##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
    ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
