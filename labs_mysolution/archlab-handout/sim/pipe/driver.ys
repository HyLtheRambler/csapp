#######################################################################
# Test for copying block of size 1;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $1, %rdx		# src and dst have 1 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	call check	        # Call checker code
	halt                    # should halt with 0xaaaa in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	andq %rdx, %rdx
	jle Done
	iaddq $-8, %rdx
	jl handleRemainder
	iaddq $8, %rdx

loopUnrolling8ways:
	mrmovq (%rdi), %rcx	# read val from src...
	mrmovq 8(%rdi), %r8
	mrmovq 16(%rdi), %r9
	mrmovq 24(%rdi), %r10
	mrmovq 32(%rdi), %r11
	mrmovq 40(%rdi), %r12
	mrmovq 48(%rdi), %r13
	mrmovq 56(%rdi), %r14

movAndJmp_1:
	rmmovq %rcx, (%rsi)
	andq %rcx, %rcx
	jle movAndJmp_2
	iaddq $1, %rax
	
movAndJmp_2:
	rmmovq %r8, 8(%rsi)
	andq %r8, %r8
	jle movAndJmp_3
	iaddq $1, %rax

movAndJmp_3:
	rmmovq %r9, 16(%rsi)
	andq %r9, %r9
	jle movAndJmp_4
	iaddq $1, %rax

movAndJmp_4:
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	jle movAndJmp_5
	iaddq $1, %rax

movAndJmp_5:
	rmmovq %r11, 32(%rsi)
	andq %r11, %r11
	jle movAndJmp_6
	iaddq $1, %rax

movAndJmp_6:
	rmmovq %r12, 40(%rsi)
	andq %r12, %r12
	jle movAndJmp_7
	iaddq $1, %rax

movAndJmp_7:
	rmmovq %r13, 48(%rsi)
	andq %r13, %r13
	jle movAndJmp_8
	iaddq $1, %rax

movAndJmp_8:
	rmmovq %r14, 56(%rsi)
	andq %r14, %r14
	jle test
	iaddq $1, %rax

test:
	iaddq $64, %rdi
	iaddq $64, %rsi
	iaddq $-8, %rdx
	andq %rdx, %rdx
	je Done
	jl handleRemainder
	jmp loopUnrolling8ways

handleRemainder: # -7 ~ -1 -> 1 ~ 7
	mrmovq (%rdi), %rcx
	iaddq $4, %rdx
	rmmovq %rcx, (%rsi)
	andq %rcx, %rcx	
	jle Next1
	iaddq $1, %rax
Next1:
	jl handleRemainder_1_to_3 # -7 ~ -5 -> 1 ~ 3
	# %rdx: 0 ~ 3 -> 4 ~ 7
	mrmovq 8(%rdi), %r8
	mrmovq 16(%rdi), %r9
	mrmovq 24(%rdi), %r10
	iaddq $-2, %rdx
	rmmovq %r8, 8(%rsi)
	andq %r8, %r8
	jle Next2
	iaddq $1, %rax
Next2:
	rmmovq %r9, 16(%rsi)
	andq %r9, %r9
	jle Next3
	iaddq $1, %rax
Next3:
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	jle Next4
	iaddq $1, %rax
Next4:
	jl handleRemainder_4_to_5 # -2 ~ -1 -> 4 ~ 5
	# 0 ~ 1 -> 6 ~ 7
	mrmovq 32(%rdi), %r11
	mrmovq 40(%rdi), %r12
	iaddq $-1, %rdx
	andq %r11, %r11
	rmmovq %r11, 32(%rsi)
	jle Next5
	iaddq $1, %rax
Next5:
	rmmovq %r12, 40(%rsi)
	andq %r12, %r12
	jle Next6
	iaddq $1, %rax
Next6:
	jl Done # -1 -> 6
	mrmovq 48(%rdi), %r13
	rmmovq %r13, 48(%rsi)
	andq %r13, %r13
	jle Done
	iaddq $1, %rax
	jmp Done # 7

handleRemainder_1_to_3:
	iaddq $2, %rdx # -1 ~ 1 -> 1 ~ 3
	jl Done # -7 -> 1
	mrmovq 8(%rdi), %rcx
	iaddq $-1, %rdx # -1 ~ 0 -> 2 ~ 3
	rmmovq %rcx, 8(%rsi)
	andq %rcx, %rcx
	jle Next7
	iaddq $1, %rax
Next7:
	jl Done # 2
	mrmovq 16(%rdi), %rcx
	andq %rcx, %rcx
	rmmovq %rcx, 16(%rsi)
	jle Next8
	iaddq $1, %rax
Next8:
	jmp Done # 3

handleRemainder_4_to_5:
	iaddq $1, %rdx
	jl Done # 4
	mrmovq 32(%rdi), %rcx
	andq %rcx, %rcx
	rmmovq %rcx, 32(%rsi)
	jle Done
	iaddq $1, %rax
	jmp Done # 5

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:
#################################################################### 
# Epilogue code for the correctness testing driver
####################################################################

# This is the correctness checking code.
# It checks:
#   1. %rax has 1.  Set %rax to 0xbbbb if not.
#   2. The total length of the code is less than or equal to 1000.
#      Set %rax to 0xcccc if not.
#   3. The source data was copied to the destination.
#      Set %rax to 0xdddd if not.
#   4. The words just before and just after the destination region
#      were not corrupted.  Set %rax to 0xeeee if not.
# If all checks pass, then sets %rax to 0xaaaa
check:
	# Return value test
	irmovq $1,%r10
	subq %r10,%rax
	je checkb
	irmovq $0xbbbb,%rax  # Failed test #1
	jmp cdone
checkb:
	# Code length check
	irmovq EndFun,%rax
	irmovq StartFun,%rdx
	subq %rdx,%rax
	irmovq $1000,%rdx
	subq %rax,%rdx
	jge checkm
	irmovq $0xcccc,%rax  # Failed test #2
	jmp cdone
checkm:
	irmovq dest, %rdx # Pointer to next destination location
	irmovq src,%rbx   # Pointer to next source location
	irmovq $1,%rdi  # Count
	andq %rdi,%rdi
	je checkpre         # Skip check if count = 0
mcloop:
	mrmovq (%rdx),%rax
	mrmovq (%rbx),%rsi
	subq %rsi,%rax
	je  mok
	irmovq $0xdddd,%rax # Failed test #3
	jmp cdone
mok:
	irmovq $8,%rax
	addq %rax,%rdx	  # dest ++
	addq %rax,%rbx    # src++
	irmovq $1,%rax
	subq %rax,%rdi    # cnt--
	jg mcloop
checkpre:
	# Check for corruption
	irmovq Predest,%rdx
	mrmovq (%rdx), %rax  # Get word before destination
	irmovq $0xbcdefa, %rdx
	subq %rdx,%rax
	je checkpost
	irmovq $0xeeee,%rax  # Failed test #4
	jmp cdone
checkpost:
	# Check for corruption
	irmovq Postdest,%rdx
	mrmovq (%rdx), %rax  # Get word after destination
	irmovq $0xdefabc, %rdx
	subq %rdx,%rax
	je checkok
	irmovq $0xeeee,%rax # Failed test #4
	jmp cdone
checkok:
	# Successful checks
	irmovq $0xaaaa,%rax
cdone:
	ret

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad 1
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
