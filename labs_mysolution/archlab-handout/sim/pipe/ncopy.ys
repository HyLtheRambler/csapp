#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header
	iaddq $-8, %rdx
	jl handleRemainder

loopUnrolling8ways:
	mrmovq (%rdi), %rcx	# read val from src...
	mrmovq 8(%rdi), %r8
	mrmovq 16(%rdi), %r9
	mrmovq 24(%rdi), %r10
	mrmovq 32(%rdi), %r11
	mrmovq 40(%rdi), %r12
	mrmovq 48(%rdi), %r13
	mrmovq 56(%rdi), %r14

movAndJmp_1:
	rmmovq %rcx, (%rsi)
	andq %rcx, %rcx
	jle movAndJmp_2
	iaddq $1, %rax
	
movAndJmp_2:
	rmmovq %r8, 8(%rsi)
	andq %r8, %r8
	jle movAndJmp_3
	iaddq $1, %rax

movAndJmp_3:
	rmmovq %r9, 16(%rsi)
	andq %r9, %r9
	jle movAndJmp_4
	iaddq $1, %rax

movAndJmp_4:
	rmmovq %r10, 24(%rsi)
	andq %r10, %r10
	jle movAndJmp_5
	iaddq $1, %rax

movAndJmp_5:
	rmmovq %r11, 32(%rsi)
	andq %r11, %r11
	jle movAndJmp_6
	iaddq $1, %rax

movAndJmp_6:
	rmmovq %r12, 40(%rsi)
	andq %r12, %r12
	jle movAndJmp_7
	iaddq $1, %rax

movAndJmp_7:
	rmmovq %r13, 48(%rsi)
	andq %r13, %r13
	jle movAndJmp_8
	iaddq $1, %rax

movAndJmp_8:
	rmmovq %r14, 56(%rsi)
	andq %r14, %r14
	jle test
	iaddq $1, %rax

test:
	iaddq $64, %rdi
	iaddq $64, %rsi
	iaddq $-8, %rdx
	jge loopUnrolling8ways

handleRemainder: # -8 ~ -1 (0 ~ 7)

	iaddq $4, %rdx # -4 ~ 3
	jge handleRemainder_4to7

handleRemainder_0to3:
	iaddq $2, %rdx # -2 ~ 1 (0 ~ 3)

	jl handleRemainder_0to1

handleRemainder_2to3:
	
	mrmovq 8(%rdi), %rcx
	je handleRemainder_2

	mrmovq 16(%rdi), %rcx
	jmp handleRemainder_3

handleRemainder_0to1:
	iaddq $1, %rdx

	mrmovq (%rdi), %rcx
	je handleRemainder_1

	ret

handleRemainder_4to7:
	iaddq $-2, %rdx # -2 ~ 1
	jge handleRemainder_6to7

handleRemainder_4to5:
	iaddq $1, %rdx

	mrmovq 32(%rdi), %rcx
	je handleRemainder_5

	mrmovq 24(%rdi), %rcx
	jmp handleRemainder_4

handleRemainder_6to7:
	mrmovq 40(%rdi), %rcx
	je handleRemainder_6

	mrmovq 48(%rdi), %rcx

handleRemainder_7:
	andq %rcx, %rcx
	rmmovq %rcx, 48(%rsi)
	mrmovq 40(%rdi), %rcx
	jle handleRemainder_6
	iaddq $1, %rax

handleRemainder_6:
	andq %rcx, %rcx
	rmmovq %rcx, 40(%rsi)
	mrmovq 32(%rdi), %rcx
	jle handleRemainder_5
	iaddq $1, %rax

handleRemainder_5:
	andq %rcx, %rcx
	rmmovq %rcx, 32(%rsi)
	mrmovq 24(%rdi), %rcx
	jle handleRemainder_4
	iaddq $1, %rax

handleRemainder_4:
	andq %rcx, %rcx
	rmmovq %rcx, 24(%rsi)
	mrmovq 16(%rdi), %rcx
	jle handleRemainder_3
	iaddq $1, %rax

handleRemainder_3:
	andq %rcx, %rcx
	rmmovq %rcx, 16(%rsi)
	mrmovq 8(%rdi), %rcx
	jle handleRemainder_2
	iaddq $1, %rax

handleRemainder_2:
	andq %rcx, %rcx
	rmmovq %rcx, 8(%rsi)
	mrmovq (%rdi), %rcx
	jle handleRemainder_1
	iaddq $1, %rax

handleRemainder_1:
	andq %rcx, %rcx
	rmmovq %rcx, (%rsi)
	jle Done
	iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
